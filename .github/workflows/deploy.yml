name: Deploy to Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        if [ -d "tests" ] && [ -n "$(find tests -name '*.py' 2>/dev/null)" ]; then
          python -m pytest tests/ -v
        else
          echo "‚ö†Ô∏è No tests directory found or no Python test files, skipping tests..."
        fi

    - name: Lint Python code
      run: |
        if command -v flake8 >/dev/null 2>&1; then
          python -m flake8 --max-line-length=100 --ignore=E501,W503 *.py || echo "‚ö†Ô∏è Linting completed with warnings"
        else
          echo "‚ö†Ô∏è flake8 not available, skipping linting..."
        fi

    - name: Validate Docker Compose
      run: |
        if [ -f "docker-compose.yml" ]; then
          if command -v docker-compose >/dev/null 2>&1; then
            docker-compose config -q && echo "‚úÖ Docker Compose syntax is valid"
          else
            echo "‚ö†Ô∏è docker-compose not available, skipping validation..."
          fi
        else
          echo "‚ö†Ô∏è No docker-compose.yml found"
        fi

    - name: Deploy to server
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          set -e
          echo "üöÄ Starting deployment..."
          
          # Navigate to deployment directory
          cd ${{ secrets.DEPLOY_PATH || '/opt/jellyfin-setup' }}
          
          # Backup current configuration
          echo "üì¶ Creating backup..."
          if [ -f "docker-compose.yml" ]; then
            cp docker-compose.yml "docker-compose.yml.backup.$(date +%Y%m%d_%H%M%S)" || echo "‚ö†Ô∏è Failed to create backup, continuing..."
          fi
          
          # Pull latest changes
          echo "üì• Pulling latest changes..."
          if [ -d ".git" ]; then
            git fetch origin || { echo "‚ùå Failed to fetch from GitHub"; exit 1; }
            git reset --hard origin/main || { echo "‚ùå Failed to reset to latest changes"; exit 1; }
          else
            echo "‚ùå Not a git repository! Please ensure this is deployed from a git clone."
            exit 1
          fi
          
          # Install/update Python dependencies
          echo "üêç Installing Python dependencies..."
          if [ -f "requirements.txt" ]; then
            python3 -m pip install --user -r requirements.txt || echo "‚ö†Ô∏è Failed to install some dependencies, continuing..."
            # Update PATH to include user-installed packages
            export PATH="$HOME/.local/bin:$PATH"
          else
            echo "‚ö†Ô∏è No requirements.txt found, skipping Python dependencies..."
          fi
          
          # Create required directories
          echo "üìÅ Creating required directories..."
          mkdir -p media/{movies,tv,music,photos} jellyfin_config xteve_config npm_data letsencrypt
          
          # Check environment configuration
          echo "üîß Checking environment configuration..."
          if [ ! -f ".env" ] && [ -f ".env.example" ]; then
            echo "‚ö†Ô∏è No .env file found. Please copy .env.example to .env and configure it."
            echo "‚ÑπÔ∏è For now, continuing with default values..."
          elif [ ! -f ".env" ] && [ ! -f ".env.example" ]; then
            echo "‚ö†Ô∏è No environment configuration files found. Services may not work correctly."
          else
            echo "‚úÖ Environment configuration found"
          fi
          
          # Set permissions
          echo "üîê Setting permissions..."
          if [ -w . ]; then
            chown -R $USER:$USER . 2>/dev/null || echo "‚ö†Ô∏è Failed to change ownership, continuing..."
            chmod +x scripts/*.sh 2>/dev/null || echo "‚ö†Ô∏è Failed to make scripts executable, continuing..."
          else
            echo "‚ö†Ô∏è No write permissions in current directory"
          fi
          
          # Run any pre-deployment scripts
          echo "üîß Running pre-deployment tasks..."
          if [ -f scripts/pre-deploy.sh ]; then
            bash scripts/pre-deploy.sh
          fi
          
          # Stop existing containers
          echo "‚èπÔ∏è Stopping existing containers..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down || echo "‚ö†Ô∏è No containers to stop or failed to stop some containers"
          else
            echo "‚ö†Ô∏è No docker-compose.yml found, skipping container stop"
          fi
          
          # Pull latest images
          echo "üì¶ Pulling latest Docker images..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose pull || echo "‚ö†Ô∏è Failed to pull some images, continuing..."
          fi
          
          # Start services
          echo "‚ñ∂Ô∏è Starting services..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose up -d || { echo "‚ùå Failed to start containers"; exit 1; }
          else
            echo "‚ùå No docker-compose.yml found, cannot start services"
            exit 1
          fi
          
          # Wait for services to be ready
          echo "‚è≥ Waiting for services to be ready..."
          sleep 30
          
          # Health check
          echo "üè• Running health checks..."
          if [ -f "scripts/health-check.sh" ]; then
            bash scripts/health-check.sh || echo "‚ö†Ô∏è Health check failed, but continuing..."
          else
            echo "‚ö†Ô∏è No health check script found, skipping..."
          fi
          
          # Run post-deployment scripts
          echo "‚úÖ Running post-deployment tasks..."
          if [ -f scripts/post-deploy.sh ]; then
            bash scripts/post-deploy.sh
          fi
          
          echo "üéâ Deployment completed successfully!"
          
          # Show container status
          echo "üìä Container status:"
          docker-compose ps

    - name: Notify deployment status
      if: always() && secrets.DISCORD_WEBHOOK_URL
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          MESSAGE="‚úÖ Deployment to server completed successfully!"
          COLOR="3066993"
        else
          MESSAGE="‚ùå Deployment to server failed!"
          COLOR="15158332"
        fi
        
        curl -H "Content-Type: application/json" -X POST -d "{
          \"embeds\": [{
            \"title\": \"Jellyfin Setup Deployment\",
            \"description\": \"$MESSAGE\",
            \"color\": $COLOR,
            \"fields\": [
              {
                \"name\": \"Repository\",
                \"value\": \"${{ github.repository }}\",
                \"inline\": true
              },
              {
                \"name\": \"Branch\",
                \"value\": \"${{ github.ref_name }}\",
                \"inline\": true
              },
              {
                \"name\": \"Commit\",
                \"value\": \"[\`${{ github.sha }}\`](${{ github.event.head_commit.url }})\",
                \"inline\": true
              }
            ],
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
          }]
        }" "${{ secrets.DISCORD_WEBHOOK_URL }}" || echo "Failed to send Discord notification"
